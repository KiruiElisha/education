import { precacheAndRoute } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies'
import { ExpirationPlugin } from 'workbox-expiration'
import { BackgroundSyncPlugin } from 'workbox-background-sync'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { clientsClaim } from 'workbox-core'

// Take control immediately
clientsClaim()

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST)

// Background sync queue for API requests
const bgSyncPlugin = new BackgroundSyncPlugin('apiQueue', {
  maxRetentionTime: 24 * 60, // 24 hours in minutes
  onSync: async ({ queue }) => {
    try {
      await queue.replayRequests()
      // Notify the user that data has been synced
      self.registration.showNotification('Background sync complete', {
        body: 'All your changes have been synced'
      })
    } catch (error) {
      console.error('Background sync failed:', error)
    }
  }
})

// Register routes with different strategies
// API routes with background sync
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      bgSyncPlugin,
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60 // 24 hours
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ],
    networkTimeoutSeconds: 10
  }),
  'POST' // Only POST requests
)

// API GET requests
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new StaleWhileRevalidate({
    cacheName: 'api-cache-get',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60 // 24 hours
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200]
      })
    ]
  }),
  'GET'
)

// Handle offline fallback
const offlineFallbackPage = '/student-portal/offline.html'

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('offline-cache').then((cache) => {
      return cache.add(offlineFallbackPage)
    })
  )
})

// Handle periodic sync for data updates
self.addEventListener('periodicsync', (event) => {
  if (event.tag === 'sync-data') {
    event.waitUntil(syncData())
  }
})

async function syncData() {
  try {
    // Sync attendance data
    await fetch('/api/method/education.api.get_attendance')
    // Sync grades data
    await fetch('/api/method/education.api.get_grades')
    // Sync schedule data
    await fetch('/api/method/education.api.get_schedule')
    
    // Notify user
    self.registration.showNotification('Data Updated', {
      body: 'Your student data has been updated',
      icon: '/assets/education/frontend/pwa-icons/icon-192x192.png'
    })
  } catch (error) {
    console.error('Periodic sync failed:', error)
  }
}

// Handle push notifications
self.addEventListener('push', (event) => {
  const options = {
    body: event.data.text(),
    icon: '/assets/education/frontend/pwa-icons/icon-192x192.png',
    badge: '/assets/education/frontend/pwa-icons/icon-96x96.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: '1'
    },
    actions: [
      {
        action: 'explore',
        title: 'View Details'
      },
      {
        action: 'close',
        title: 'Close'
      }
    ]
  }

  event.waitUntil(
    self.registration.showNotification('Frappe Education', options)
  )
})

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close()

  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/student-portal')
    )
  }
}) 